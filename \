<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Class Information</title>
    <style>
        @keyframes slideUpFadeIn {
            0% {
                opacity: 0;
                transform: translate(-50%, 20px);
            }
            100% {
                opacity: 1;
                transform: translate(-50%, -50%);
            }
        }

        @keyframes slideDownFadeOut {
            0% {
                opacity: 1;
                transform: translate(-50%, -50%);
            }
            100% {
                opacity: 0;
                transform: translate(-50%, 20px);
            }
        }

        body {
            margin: 0;
            overflow: hidden;
            font-family: Arial, sans-serif;
            color: #ffffff;
            background-color: #000000;
        }

        #container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        .title {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 3em;
            font-weight: bold;
            text-align: center;
            z-index: 10;
            opacity: 0;
            animation: slideUpFadeIn 2s ease-in-out forwards;
            display: none;
        }

        .button-container {
            position: absolute;
            top: 70%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 10;
            opacity: 0;
            transition: opacity 2s ease-in-out;
            display: none;
        }

        .persistent-button-container {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 10;
        }

        .button {
            background-color: transparent;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border: 2px solid white;
            border-radius: 12px;
        }

        .button:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }
    </style>
</head>
<body>
    <div id="container"></div>
    <div class="title" id="title">Class Information</div>
    <div class="button-container" id="button-container">
        <button class="button" onclick="moveCamera(-1000)">More Information</button>
    </div>
    <div class="persistent-button-container">
        <button class="button" onclick="moveCamera(500)">Back to Main Page</button>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tween.js/18.6.4/tween.umd.js"></script>
    <script>
        // Three.js setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.getElementById('container').appendChild(renderer.domElement);

        // Particles
        const particles = new THREE.BufferGeometry();
        const particleCount = 1000;
        const positions = new Float32Array(particleCount * 3);
        const initialPositions = [];

        for (let i = 0; i < particleCount * 3; i++) {
            positions[i] = Math.random() * 2000 - 1000;
            initialPositions.push(positions[i]);
        }

        particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));

        const particleMaterial = new THREE.MeshStandardMaterial({ 
            color: 0xffffff, 
            emissive: 0xaaaaaa,
            emissiveIntensity: 1.5 
        });

        const sphereGeometry = new THREE.SphereGeometry(2, 16, 16);
        const particleMeshes = [];

        for (let i = 0; i < particleCount; i++) {
            const particleMesh = new THREE.Mesh(sphereGeometry, particleMaterial);
            particleMesh.position.set(
                positions[i * 3],
                positions[i * 3 + 1],
                positions[i * 3 + 2]
            );
            scene.add(particleMesh);
            particleMeshes.push(particleMesh);
        }

        camera.position.z = 500;

        // Track mouse movement
        let mouseX = 0;
        let mouseY = 0;
        let targetX = 0;
        let targetY = 0;

        document.addEventListener('mousemove', (event) => {
            mouseX = (event.clientX / window.innerWidth) * 2 - 1;
            mouseY = -(event.clientY / window.innerHeight) * 2 + 1;
        });

        function animate() {
            requestAnimationFrame(animate);
            TWEEN.update();

            particleMeshes.forEach(mesh => {
                mesh.rotation.x += 0.001;
                mesh.rotation.y += 0.001;
            });

            // Update particle rotation based on mouse position and automatic rotation
            targetX = mouseX * 0.05;
            targetY = mouseY * 0.05;
            scene.rotation.x += (targetY - scene.rotation.x) * 0.05;
            scene.rotation.y += (targetX - scene.rotation.y) * 0.05;
            scene.rotation.x += 0.001; // Continuous rotation
            scene.rotation.y += 0.001; // Continuous rotation

            renderer.render(scene, camera);
        }
        animate();

        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });

        function animateParticles() {
            const particleAnimations = particleMeshes.map((mesh, i) => {
                const toCenter = new TWEEN.Tween(mesh.position)
                    .to({ x: 0, y: 0, z: 0 }, 2000)
                    .easing(TWEEN.Easing.Quadratic.InOut)
                    .onComplete(() => {
                        setInterval(() => {
                            const randomX = Math.random() * 2000 - 1000;
                            const randomY = Math.random() * 2000 - 1000;
                            const randomZ = Math.random() * 2000 - 1000;

                            new TWEEN.Tween(mesh.position)
                                .to({ x: randomX, y: randomY, z: randomZ }, 2000)
                                .easing(TWEEN.Easing.Quadratic.InOut)
                                .start();
                        }, 2000);
                    });

                const toInitial = new TWEEN.Tween(mesh.position)
                    .to({
                        x: initialPositions[i * 3],
                        y: initialPositions[i * 3 + 1],
                        z: initialPositions[i * 3 + 2]
                    }, 2000)
                    .easing(TWEEN.Easing.Quadratic.InOut);

                toCenter.chain(toInitial);
                return toCenter;
            });

            particleAnimations.forEach(anim => anim.start());
        }

        animateParticles();

        function showMainPage() {
            document.getElementById('title').style.display = 'block';
            document.getElementById('button-container').style.display = 'block';
            requestAnimationFrame(() => {
                document.getElementById('title').style.opacity = 1;
                document.getElementById('title').style.animation = 'slideUpFadeIn 2s ease-in-out forwards';
                document.getElementById('button-container').style.opacity = 1;
            });
        }

        function hideMainPage() {
            document.getElementById('title').style.animation = 'slideDownFadeOut 2s ease-in-out forwards';
            document.getElementById('button-container').style.opacity = 0;
            setTimeout(() => {
                document.getElementById('title').style.display = 'none';
                document.getElementById('title').style.opacity = 0;
                document.getElementById('title').style.animation = 'none';
                document.getElementById('button-container').style.display = 'none';
            }, 2000);
        }

        function moveCamera(zPosition) {
            new TWEEN.Tween(camera.position)
                .to({ z: zPosition }, 2000)
                .easing(TWEEN.Easing.Quadratic.InOut)
                .onStart(() => {
                    if (zPosition === -1000) {
                        hideMainPage();
                    } else if (zPosition === 500) {
                        showMainPage();
                    }
                })
                .start();
        }

        window.moveCamera = moveCamera;

        showMainPage();
    </script>
</body>
</html>

